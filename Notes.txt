Initialize the whole Web3 architecture with this command:
npx thirdweb@latest create --contract

After finishing writing your smart contract, you modify the hardhat.config file.
You have to get the private key of the account from which you plan to deploy your smart contract (usually a Metamask wallet account).
You save that private key in the .env file and make sure that in the .gitignore file .env is listed, so that you don't share it 
to the GitHub.
Then you get the rpc endpoint of the Ethereum network you are deploying your smart contract to. In thsi case it is the Sepolia test network.
The link to that endpoint is the following: https://rpc.ankr.com/eth_sepolia.
Basically your hardhat.config file will look like this in the end:

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: {
    version: "0.8.9",
    defaultNetwork: "sepolia",
    networks: {
      hardhat: {},
      sepolia: {
        url: "https://rpc.ankr.com/eth_sepolia",
        accounts: [`0x${process.env.PRIVATE_KEY}`],
      },
    },
    settings: {
      optimizer: {
        enabled: true,
        runs: 200,
      },
    },
  },
};

Then you go to your terminal and make sure you are under the folder which contains your "backend" (i.e., web3) code. In this particular case "crowdfunding_web3.
Then you run the following command:
npm run deploy

Then, when everything is successful the following notification will appear:
Open this link to deploy your contracts: https://thirdweb.com/contracts/deploy/[some_id]
Click on that link and you'll be re-directed to the Thirdweb website. Follow the instructions there to deploy your smart contract.

After the smart contract is finally deployed, now it's time to create the front-end part. To start working on the front-end switch
to the ./client folder in your application.
There run the following command:
npx thirdweb create --app 

Where I left:
1:06:48